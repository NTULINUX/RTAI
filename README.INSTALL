=== Installing RTAI ===

Commands marked with # specify root, commands marked with $ are user commands.

1.) Download the RTAI source

$ git clone https://github.com/NTULINUX/RTAI.git

2.) Patch kernel with IPIPE, in this case we use 4.14.173

# rm -rf /usr/src/000*.patch /usr/src/linux
# cd /usr/src
# wget https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.14.173.tar.xz
# tar xf linux-4.14.173.tar.xz
# ln -sfv linux-4.14.173 linux
# cp -aLv /path/to/this/RTAI-git-tree/ksrc/patches/v4.14.173/*.patch /usr/src/
# cd linux
# patch -p1 < ../0001*.patch
# patch -p1 < ../0002*.patch
# patch -p1 < ../0003*.patch
# patch -p1 < ../0004*.patch
# make olddefconfig
# make menuconfig

Configure to your needs

# make bzImage && make modules
# make install && make modules_install

=== WARNING: Debian and Debian-based distro developers ===

If you are using kernel sources from git:

Running simply `make deb-pkg` in the kernel source will add a "+" sign to the
kernel version, regardless if CONFIG_LOCALVERSION is set in the kernel config.
Using `make deb-pkg LOCALVERSION=<string>` when CONFIG_LOCALVERSION is empty will
break compatibility of `rtai-config --full-linux-version` as that script uses
CONFIG_LOCALVERSION from the kernel config, not what gets passed to `make deb-pkg`

For building the kernel .deb package, the way to solve this by setting the kernel
local version using the kernel's Kconfig interface located at "General setup ->
Prompt: Local version - append to kernel release" then building the package using
`deb-pkg LOCALVERSION=""` as this will prevent anything from being added to the
kernel version. This method keeps functionality of `rtai-config --full-linux-version`

3.) Update grub

Refer to your distribution documentation to do this. Generally for newer distros:

# grub-mkconfig -o /boot/grub/grub.cfg

4.) Configure, build and install RTAI (MUST BE BOOTED INTO YOUR NEW RTAI KERNEL)

$ cd ~/RTAI
$ ./autogen.sh
$ make menuconfig

Configure to your needs. You may also use ./configure instead.

For a full list of possible options:

$ ./configure --help

To build and install RTAI:

$ make

# make install

5.) LinuxCNC

=== WARNING: Only LinuxCNC git branches 2.8 and master are supported ===

Configure LinuxCNC:

$ cd linuxcnc/src
$ ./autogen.sh
$ ./configure

For a full list of possible options:

$ ./configure --help

Now build LinuxCNC:

$ make

Allow LinuxCNC to change permissions as needed:

# make setuid

To test LinuxCNC in a run-in-place environment:

$ cd ../ && . ./scripts/rip-environment

To run LinuxCNC latency test in said environment:

$ latency-test

Or to run LinuxCNC itself:

$ linuxcnc

For more information on building and installing LinuxCNC, please visit:

http://linuxcnc.org/docs/master/html/code/building-linuxcnc.html
