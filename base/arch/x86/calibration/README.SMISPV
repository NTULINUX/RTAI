# Copyright (C) 2005-2017 The RTAI project
# This [file] is free software; the RTAI project
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


SMISPV is an interactive monitor/supervisor of the System Management Interrupt (SMI). 
At your own choice, it can be either a complement or a substitute to the setsmi-rstsmi
approach explained in README.SMI. 

It is available here and in the RTAI installation directory, under the subdirs
"calibration/smispv" and "bin/smispv".

It allows to play with SMI configuration with a "what if" approach. 
For example, you can use it while running an RTAI latency test, 
allowing you to understand on the fly how setting certain bits on can lead to large
timed scheduling latencies. 

RTAI build system has to find at least libpci in order to be able to build it; 
if libsensors is available as well then it will be possible to monitor 
the highest temperature found on the system.
Thus, if libpci is not found then smispv will not be built. 
With libpci but without libsensors there will be no temperature monitoring.

The program shows scaring messages about its use. Nonetheless, especially
if you have read the documentation, the RTAI README on the tuning paramenter, 
if temperatures are monitored and if it is not run for too long a time, 
then the danger of actually burning you computer is somewhat limited.
Its use is simple and self contained. Launch it and follow the displayed 
usage clues.

Here are a few suggestions.

BEWARE: playing with SMI registers is NOT recommended and MAY IRREPARABLY 
DAMAGE YOUR PC.
Do it AT YOUR OWN RISK. You SHOULD KNOW WHAT YOU ARE DOING.
We think it could be helpful to disable in the BIOS any "smart fan" feature, 
and force all the fans to run at their maximum speed. 
But again, this is just speculation, and you are basically on your own.

Be also aware that if your machine has high latencies due to SMI interrupts then

- if the BIOS sets the TCO_LOCK bit of the TCO1 Control Register 
	then smispv will not be able to change the TCO_EN bit.
- if the BIOS sets the SMI_LOCK bit of the General PM Configuration 1 Register
	then smispv will not be able to change the GLB_SMI_EN bit.

The SMI registers are documented, e.g., into the 
Intel's  I/O Controller Hub 10 (ICH10) Family datasheet
that is dowoadable from

http://www.intel.com/content/www/us/en/io/io-controller-hub-10-family-datasheet.html

If you don't have the faintest idea of what an SMI interrupt is, try first
reading

https://en.wikipedia.org/wiki/System_Management_Mode

and

https://mjg59.dreamwidth.org/30773.html

later on.

Once you are documented and acquainted with it you can fix your SMI problems 
by simply running it as root with the following command: 
"smispv [[-g] -s <xxx>]"; 
where <xxx> should be the value to which you want to set the SMI registers. 
The -g option should be used if you want to change the alternate GPI registers.
The above use can be seen as a substitute of using the SMI fixing module.

Eventually a typical smispv session could be carried out as follow:

- exec the user space latency checker, found in the testsuite directory of your
  RTAI installation;
- check if it displays unusual latencies:
- if so, in another console, exec smipvi and play with the SMI bits;
- go back and forth to see is the latency behavior changes. you should check if
  current latency does not show abnormally high values anymore;
- eventually the current latency should stabilize on reasonable values;
- if you have compiled smispv with the temperature monitoring keep it running
  and go on working with linux for a bit of time, now and the checking the 
  displayed temperarurer;
- if everything remains OK, register the SMI bit map associated with the well
  working latency test;
- apply it using "smispv [[-g] -s <xxx>]" or, at you choice, using setsmi.

