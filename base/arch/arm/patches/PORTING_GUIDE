# Copyright (C) 2005-2017 The RTAI project
# This [file] is free software; the RTAI project
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

Porting Guide
=============

This guide shows the way how I'm doing the porting to new hardware and/or
kernel versions. It doesn't mean that this is the best way but maybe it gives
you a few ideas how to start with your own port. Any ideas to add or for
changes or productive criticism are very welcome!

Supported boards:

So, if you already have a RTAI/kernel patch for your board you're almost done.
You need to get the kernel, maybe a board-specific patch and the RTAI stuff.
Apply the patches and compile both the kernel and RTAI (RTAI needs to be
compiled against the used kernel).

Just like in any other RTAI installation you'll need the compiled RTAI libs and
modules installed on your board.

First tests can be done with the tools which are provided with RTAI
(<RTAI>/testsuite/*). Code examples are also available in the showroom
(cvs -d:pserver:anonymous@cvs.gna.org:/cvs/rtai co showroom).

Porting RTAI:

Basically you'll have two possible ways to port RTAI to your board:

- First way:
  Choose the newest kernel, make it ready for IPIPE and then do the RTAI port.
  Choosing this way the port has to work for your board and for the new kernel
  at the same time. You don't have the benefit of a known working kernel!
  Therefore I think it's harder to do the porting with this approach than
  choosing the following way.

- Second way:
  Find an already running solution for an older kernel and for another
  board/processor/core and start there by following the next steps. This way
  probably needs more time than the first way but it should be simpler.

Porting steps:

Motivation & overview (or: why are we doing what?)

    We want that RTAI is running on our board and most preferably on a recent
    kernel. That's the final goal. And now the question: how do we get there?

    One important thing is, that we always want to have known-to-work code in
    each porting step. The second important thing is to work on one problem /
    step at a time (second way mentioned previously in section 'Porting RTAI').

    First of all we have to choose a kernel version which is supported by RTAI
    (see 1 below). Then we have to backport a kernel which is known to work on
    our board (either a vanilla kernel or a board-specific kernel, patched by
    the distributor of the board) to the kernel version from (1) (see 2 below).

    Note: After step (2) we have a kernel version with patches for our board
          which is also known to work with RTAI (see 1).

    Note: Until now RTAI isn't involved in the porting process.

    The RTAI port to our board is done in step (3), starting with the kernel
    from (2). The first thing to do is to apply the IPIPE patch to the kernel
    (see 3.1). After successfully applying the patch, the kernel should compile
    and boot. For that we need to implement some dummy functions.

    Note: The kernel doesn't need working IPIPE code. We don't use the IPIPE
          functionality at the moment! We just need a kernel with IPIPE support
          to configure RTAI. (RTAI checks the kernel if an IPIPE patch is
          applied.) So implementing dummies is ok here and now.

    Note: We now have a well prepared kernel: The kernel supports our board and
          is also supported by RTAI plus the IPIPE patch applies cleanly and
          the system is able to boot.

    Now we concentrate on configuring RTAI for our board. We need to add some
    dummy files and dummy code to configure RTAI but we don't need real code
    here (see 3.2). Please use the RTAI version which fits to the kernel port
    (e.g. for L138/davinci: Linux-2.6.37.6 and RTAI-3.9.1)

    Note: While we're concentrating on the configuration of RTAI we use dummy
          files and code. We want to successfully configure RTAI for our board,
          nothing else. We don't want to compile RTAI and therefore we don't
          need real and working code at the moment.

    After the successful configuration of RTAI we have to implement our code.
    First we simply want to compile RTAI without errors due to missing
    arch-specific functions (see 3.3). Again no real code is necessary at this
    stage.

    Note: For a successful compilation we need to implement some dummy
          functions. Again we don't need real code here. We just want to
          compile RTAI (and the kernel) without errors.

    The next step (3.4) is the real code implementation (basically timer
    stuff), the porting work itself.

    Note: The steps 3.1, 3.2 and 3.3 are preparing the kernel and RTAI for the
          real port. The real porting work is done only in 3.4.

    Note: After step 3 we have a first RTAI patch for our board. Most probably
          this port is done with an ancient or at least old kernel but it adds
          support for our board to RTAI.

    The last step (4) is the port of the RTAI support (done in (3)) to a recent
    kernel, the kernel we started with in (2).

    Note: We're done with the porting work and have ported RTAI to our board,
          running on a recent kernel.

1   Choose a linux kernel with Adeos/IPIPE/RTAI support for ARM

    You should prefer a kernel which supports your ARM core. Choose 2.6.7 for
    imx or 2.6.20 for at91 for example. If you have a board which is already
    supported you are finished. If your processor is supported you'll have to
    port that version to your board. If your ARM core is supported start with
    that kernel and port it to your processor.

    If the core is not supported you might want to choose the most recent one
    which is already running with RTAI (2.6.37.6 at the moment). Ancient
    kernel in this case but at least you can be sure, that the chosen kernel is
    already working with RTAI on ARM.

2   First the board then RTAI

    If you have to do the port for your processor or core, you should start
    with backporting your board to the chosen kernel (In this step without
    RTAI). This could mean to backport to a very ancient kernel (2.6.20.13 in
    case of the at91). But you can be sure, that it'll work if you backport
    step by step. You can go through other kernel versions, too. Clean it up
    until patching with the Adeos/IPIPE patch runs without errors.

    In the end you'll have a kernel running on your board and which was tested
    and ported to RTAI before. You'll have an existing RTAI port for that
    kernel too for the next step. Maybe this step needs some time, but there is
    no RTAI involved in this step and therefore it should be relatively simple.

    This step can be done with a minimal defconfig (without fs/, drivers/, ...)
    to reduce compile time and to avoid compiling of unneeded code.

3   Port the existing Adeos/IPIPE/RTAI support to your core/processor/board

    Use the existing RTAI patches in this step. Read the patches, try to
    understand what they are patching, divide them into the Adeos/IPIPE and
    RTAI parts. Following the previous steps, you'll have a running kernel for
    your board and you'll have RTAI patches to start with.

    Maybe you'll have to add support for your processor (RTAI configuration)
    and some other things to RTAI in this step too.

3.1 Apply the IPIPE patch to the backported kernel

    To configure (and compile) RTAI it's mandatory to have an IPIPE-patched and
    compiled kernel. So let's apply the IPIPE patch to the already backported
    kernel for your board. Make sure, that it applies cleanly without successful
    or (even failed) hunks. Edit your backport patch until IPIPE applies
    successfully. Don't modify the IPIPE patch itself.

    To compile the kernel you'll have to add some dummy functions (architecture
    specific IPIPE code). They are not needed to do something as long as we
    don't use the IPIPE functionality but mandatory to compile the kernel.

    Finally make sure, that the kernel is able to boot both with IPIPE disabled
    and with IPIPE enabled.

    Modified files:
    - arch/arm/mach-<subarch>/timer.c
    - include/asm-arm/arch-<subarch>/irqs.h
    - include/asm-arm/system.h
    - include/linux/ipipe_tickdev.h
    - kernel/sched.c

3.2 Prepare RTAI for the new ARM subarchitecture

    RTAI must support the new subarchitecture. If the subarchitecture isn't
    supported the configure script ends with the error message: 'Unsupported
    ARM sub-architecture -- Sorry.'

    The configure script and some makefiles need to be modified:
    'configure.in', 'base/arch/arm/hal/GNUmakefile.am' and
    'base/include/asm-arm/GNUmakefile.am'.

    Some new directories and files for the subarchitecture are needed too:
    In 'base/arch/arm/hal/mach-<subarch>/': '<subarch>-timer.c' and in
    'base/include/asm-arm/arch-<subarch>/': 'rtai_arch.h', 'rtai_exports.h',
    'rtai_timer.h'.

    The commands 'autoconf2.61', 'aclocal' and 'automake' prepare RTAI for the
    new ARM subarchitecture. After patching the files and running the commands
    RTAI is ready and can be configured for the new architecture.

    Modified files:
    - base/arch/arm/hal/GNUmakefile.am
    - base/include/asm-arm/GNUmakefile.am
    - configure.in
    - base/arch/arm/hal/mach-<subarch>/<subarch>-timer.c
    - base/include/asm-arm/arch-<subarch>/rtai_arch.h
    - base/include/asm-arm/arch-<subarch>/rtai_exports.h
    - base/include/asm-arm/arch-<subarch>/rtai_timer.h

3.3 Compiling RTAI against the IPIPE-enabled kernel

    Modified files:
    - base/arch/arm/hal/hal.c
    - base/arch/arm/hal/mach-<subarch>/<subarch>-timer.c
    - base/include/asm-arm/arch-<subarch>/rtai_arch.h
    - base/include/asm-arm/arch-<subarch>/rtai_timer.h
    - base/include/asm-arm/rtai_hal.h

3.4 Implementing code in the dummy functions - The real porting work

    Finally we have to implement functional code in the dummy functions and the
    defines have to be set to correct values. The better part of it should be
    the setup of a timer, usable by IPIPE/RTAI.

    We have to take care of the RTAI kernel modules. Loading, unloading and
    reloading must work.

    The RTAI testsuite must work, too, of cause.

    After all that's done, we are prepared to run RTAI on the new board!

4   Port to a recent kernel version

    After you succeeded in step 3 you can think of a port to a current kernel
    version. You'd start with a running RTAI on your board but with an ancient
    kernel. Choose newer kernels which already support RTAI before you choose
    the latest kernel but without support for RTAI.



This guide isn't finished! Especially step 3 'll be explained in much more
detail soon.



-------

T. Koschorrek <devel@koschorrek.com>
Copyright (C) 2015 Torsten Koschorrek
