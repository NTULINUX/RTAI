# Copyright (C) 2005-2017 The RTAI project
# This [file] is free software; the RTAI project
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


************************ LIBM SUPPORT IN KERNEL SPACE ************************

This is a rework of Dave's (David Schleef) idea of making available libm
in kernel space, as a module exporting a subset of its functions.
Such a rework is due to a few reasons. Among them, one is the need 
to avoid user space headers, which may require a distribution proper 
special include path; another one is that the previous implementation 
used a few source files with a dubious free software license. 
So it has been decided to have something different and completely self 
contained within RTAI. 

In such a view the new kernel math support make machinery does not 
care of importing and compiling the needed math functions into RTAI. 
Instead, it statically links an existing libm.a library into an RTAI 
module, without the need of compiling anything but a wrapper module 
containing appropriate symbol exports and a few functions missed at 
the linking. 
Moreover it now correctly handles errno (kerrno in RTAI), which was not 
exploited in a thread safe way in the previous RTAI implementation.

It is based on the use of a few known and lighter-embeddable libraries: 
NEWLIB-libm.a, uClibc-ng-libc.a (uClibc-ng-libc.a embeds libm.a), 
MUSL-libc.a (MUSL-libc.a embeds libm.a).

The new implementation provides also an extension to both the double and float
versions of most of the libm functions, which should be of help in enhancing 
the possibility of setting up complex numerical applications in kernel space.

In fact, a further extension, which can be selected at configuration time,
provides a new support for complex functions in kernel space. It has required a 
simplified coding of a few missing basic functions, related to double and float
complex multiply and divide, but a more serious implementation is also available. 
The latter is taken from the LLVM compiler infrastructure, which is released 
under the, GPL compatible, permissive free(dom) dual MIT and University of 
Illinois Open Source Licenses.

Also available are a couple of helper functions, to print floating point and
double numbers in kernel space, i.e.:
- char *d2str(double d, int dgt, char *str), to convert a double to a string,
float types have to use it too;
- char *cd2str(complex double d, int dgt, char *str), to convert a double 
complex to a string, in the form "real + j*imag" (or "real + imag j"), float 
complex types have to use it too.
They should be useful for quick checks and debugging in kernel space. 
As such they are based on a somewhat naive implementation, whereas numbers 
are formatted only as: +/-0.xxxxxxe+yy, where the number of "x"es is equal 
to the number set for the argument "dgt" used in calling any of them.
The printable number is returned in both str and as a pointer.

Specific hints for each library to be used are rovided below. As a general
remark, if you are using the mentioned libraries just for RTAI kernel 
applications, configure and make will be the main required commands.
No need to "make install", if you do not need it. Just configure RTAI to point
to their original lib directory, in their "make" installation dir, avoiding 
any "make install". Have a look at their README-INSTALL files for any 
configuration option you may need.
Notice also that below we will assume no cross development. If that is the 
case, you should read their installation instructions to define the 
build/host/target architectures appropriately. The following configuration
suggestions are the basic ones to be used for having libm.a work in kernel 
space with RTAI.

NEWLIB, http://sourceware.org/newlib/.
Get its tarball and expand it, or clone its git; have a look at its README. 
For 32 bits:
- ./configure --disable-shared --disable-multilib
  Newlib does not activate the -fPIC option so --disable-shared should be
  the only thing more to care.
- make
For 64 bits:
- ./configure --disable-shared --disable-multilib CFLAGS="-mcmodel=kernel"
  Newlib does not activate the -fPIC option so --disable-shared and 
  mcmodel=kernel should be the only things more to care.
- make
- ar -dv libm.a lib_a-cacoshl.o lib_a-catanhl.o lib_a-casinhl.o lib_a-casinl.o
  RTAI rtai_math.ko does not support any "long double". It is thus strange that
  it could happen, but there have been instances in which a few long double 
  complex functions, e.g. __mulxc3, got statically linked in rtai_math.ko, or
  could be grepped somewhere through "grep -r __mulxc3", likely as a compiler
  decision to improve precision.
  Thus, it is a cautious attitude, after experiencing cases in which the above
  entries appeared in libm.a, while they did not with other Linux installations.
NEWLIB is a collection of software from several sources. So it mixes different 
licenses, some of which cannot be qualified as strictly compatible with FREE(dom)
SOFTWARE. So is up to you to decide to link it into RTAI libm.a support.

uClibc-ng, http://www.uclibc-ng.org/. (a substitute of uClibc)
Get a tarball and expand it, or clone its git and have a look at its INSTALL.
In particular, care of installing the headers of the kernel with which you will
use uClibc-ng, doing:
- cd to the kernel version you want to match;
- do: "make INSTALL_HDR_PATH=/tmp/linux-headers headers_install".
uClibc-ng has a handy menuconfig which makes its configuration setting somewhat friendlier.
So "make menuconfig" being sure to:
In Target Architecture Features and Options:
- Enable full C99 math library support
- disable long double support
- Linux kernel header location must be set to: /tmp/linux-headers/include
General Library Settings:
- disable Generate only Position Independent Code (PIC)
- disable Enable shared libraries
For 32 bits:
Development/debugging options
- Extra CFLAGS (--fno-pic)
For 64 bits:
Development/debugging options
- Extra CFLAGS (-mcmodel=kernel -fno-pic)
(REMARK - In practice, provided the above configuration points are satisfied, if you
          want to reduce the size of libm.a, as well as its compilation time, you can
	  disable anything else).
- make.
- do not care if 'lib/crti.o' failed.
- ar -dv lib/libc.a fwrite.o write.o fputs.o sprintf.o strcpy.o strlen.o memcpy.o memset.o
  needed to avoid having the above functions linked in kernel space, so using those
  provided by the kernel and to avoid a linking conflict; it is a uClib-ng specific item, 
  due to the fact that its libm.a is embedded in libc.a.
- cp lib/libc.a lib/libm.a.
  because of what said above.
UCLIBC-NG seems to be released under FREE(DOM) SOFTWARE, plain LGPL, linceses.

MUSL, http://www.musl-libc.org/.
Get a tarball and expand it, or clone its git; have a look at its 
README-INSTALL. 
Before configuring and making, execute the following script lines, from 
within its base directory:
- cp Makefile Makefile.saved, for a following possible non RTAI reuse
- sed 's/-fPIC//' <Makefile >Makefile.tmp; mv Makefile.tmp Makefile;
  needed  to disable -fPIC, set by default in the MUSL Makefile
For 32 bits:
- ./configure --disable-shared CFLAGS="-fno-common -fno-pic", 
For 64 bits:
- ./configure --disable-shared CFLAGS="-mcmodel=kernel -fno-common -fno-pic", 
- make,
- ar -dv lib/libc.a fwrite.o write.o fputs.o sprintf.o strcpy.o strlen.o memcpy.o memset.o
  needed to avoid having the above functions linked in kernel space, so using those
  provided by the kernel and to avoid a linking conflict. It is a MUSL specific item, 
  due to the fact that its libm.a is embedded in libc.a, leaving libm.a as just a
  link containing nothing.
- ar -dv lib/libc.a cpow.o cpowf.o cpowl.o
  RTAI rtai_math.ko does not support any "long double". It is thus strange that
  it could happen, but there have been instances in which a few long double 
  complex functions, e.g. __mulxc3, got statically linked in rtai_math.ko, or
  could be grepped somewhere through "grep -r __mulxc3", likely as a compiler
  decision to improve precision. The abovr functions will be anyhow provided in
  rtai_math.ko.
  Thus, it is a cautious attitude, after experiencing cases in which the above
  entry appeared in libm.a, while they did not with other Linux installations.
- cp lib/libc.a lib/libm.a.
as previously said, to have a non empty libm.a link, as required by RTAI make.
MUSL states that it is released under a (two close) standard permissive MIT license,
which should qualify as FREE(dom) SOFTWARE compatible, so GPL compatible.

***************************** A FINAL IMPORTANT REMARK *****************************
Nowadays, depending of the gcc version and enabled compiler standard options (e.g. ISOC99)
most of the functions provided by the RTAI kernel math support (rtai_math.ko) are compiler
builtins.
Therefore, it is likely that your applications will end in not using any of the rtai_math.ko
functions. Thus, even if it is insmoded, it will do nothing. To check if such is the case
and what functions of rtai_math.ko are being used eventually, you have just to insmod your
application module without insmoding rtai_math.ko. You will then be able to see, just by
using dmesg, the missing functions, if any, that will be provided by rtai_math.ko.

Marco Morandini and Paolo Mantegazza.
